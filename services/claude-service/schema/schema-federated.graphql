extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.10", import: ["@key", "@shareable", "@tag", "@override", "@external", "@provides", "@requires", "@composeDirective", "@interfaceObject"])

# Claude AI Operations GraphQL Schema - Federated
# This service handles all Claude AI-related operations for the metaGOTHIC framework

type Query {
  """List all active Claude sessions"""
  sessions: [ClaudeSession!]! @shareable
  
  """Get details of a specific session"""
  session(id: ID!): ClaudeSession @shareable
  
  """Check service health and CLI availability"""
  health: ServiceHealthStatus! @shareable
  
  """Get performance metrics for operations"""
  performanceMetrics(operation: String, lastMinutes: Int): PerformanceReport! @shareable
  
  """Get analytics for a specific session"""
  sessionAnalytics(sessionId: ID!): SessionAnalytics! @shareable
  
  """Get analytics for multiple sessions"""
  batchSessionAnalytics(sessionIds: [ID!]!): [SessionAnalytics!]! @shareable
  
  """Get session templates"""
  sessionTemplates(tags: [String!], limit: Int = 20): [SessionTemplate!]! @shareable
  
  """Get a specific template"""
  sessionTemplate(id: ID!): SessionTemplate @shareable
  
  """Get resumption data for a session"""
  sessionResumption(sessionId: ID!): SessionResumptionData! @shareable
  
  """Get resumable sessions with intelligent suggestions"""
  resumableSessions(limit: Int = 5): [ResumableSession!]! @shareable
  
  """Get current pre-warmed session status"""
  preWarmStatus: PreWarmStatus! @shareable
  
  """Get detailed pre-warm pool metrics"""
  preWarmMetrics: PreWarmMetrics @shareable
}

type Mutation {
  """Execute a Claude command in a new or existing session"""
  executeCommand(input: ClaudeExecuteInput!): ClaudeExecuteResult!
  
  """Continue an existing Claude session with a new prompt"""
  continueSession(input: ContinueSessionInput!): ClaudeExecuteResult!
  
  """Claim a pre-warmed session for use"""
  claimPreWarmedSession: PreWarmedSessionResult!
  
  """Kill an active Claude session"""
  killSession(id: ID!): Boolean!
  
  """Create a handoff document for session transfer"""
  createHandoff(input: HandoffInput!): HandoffResult!
  
  """Generate commit messages for multiple repositories"""
  generateCommitMessages(input: BatchCommitMessageInput!): BatchCommitMessageResult!
  
  """Fork a session to create a new branch from a specific point"""
  forkSession(input: ForkSessionInput!): ForkSessionResult!
  
  """Create a session template from an existing session"""
  createSessionTemplate(input: CreateSessionTemplateInput!): SessionTemplate!
  
  """Create a new session from a template"""
  createSessionFromTemplate(templateId: ID!, name: String): ClaudeSession!
  
  """Batch operations on multiple sessions"""
  batchSessionOperation(input: BatchSessionOperationInput!): BatchSessionOperationResult!
  
  """Archive a session for long-term storage"""
  archiveSession(sessionId: ID!): ArchiveResult!
  
  """Share a session with collaborators"""
  shareSession(input: ShareSessionInput!): ShareResult!
}

type Subscription {
  """Subscribe to real-time command output from a Claude session"""
  commandOutput(sessionId: ID!): CommandOutput!
  
  """Subscribe to progress updates for agent runs"""
  agentRunProgress(runId: ID!): AgentRunProgress!
  
  """Subscribe to aggregate progress for multiple runs"""
  batchProgress(batchId: ID!): BatchProgress!
  
  """Subscribe to pre-warmed session status updates"""
  preWarmStatus: PreWarmStatus!
}

# Types

type ClaudeSession @key(fields: "id") {
  """Unique session identifier"""
  id: ID!
  
  """Session creation timestamp"""
  createdAt: String!
  
  """Last activity timestamp"""
  lastActivity: String!
  
  """Current session status"""
  status: SessionStatus!
  
  """Process ID if active"""
  pid: Int
  
  """Current working directory"""
  workingDirectory: String!
  
  """Session metadata"""
  metadata: SessionMetadata!
  
  """Command history"""
  history: [CommandHistoryItem!]!
}

enum SessionStatus {
  """Session is active and ready"""
  ACTIVE
  
  """Session is processing a command"""
  PROCESSING
  
  """Session is idle"""
  IDLE
  
  """Session has been terminated"""
  TERMINATED
  
  """Session encountered an error"""
  ERROR
}

type SessionMetadata {
  """Session name"""
  name: String
  
  """Project context if loaded"""
  projectContext: String
  
  """Model being used"""
  model: String!
  
  """Token usage statistics"""
  tokenUsage: TokenUsage!
  
  """Custom flags or options"""
  flags: [String!]!
}

type TokenUsage {
  """Total input tokens used"""
  inputTokens: Int!
  
  """Total output tokens used"""
  outputTokens: Int!
  
  """Estimated cost in USD"""
  estimatedCost: Float!
}

type CommandHistoryItem {
  """Command timestamp"""
  timestamp: String!
  
  """The prompt or command sent"""
  prompt: String!
  
  """Response received"""
  response: String
  
  """Execution time in milliseconds"""
  executionTime: Int!
  
  """Whether command succeeded"""
  success: Boolean!
}

"""
Standard health status for all services in the federation.
Service-specific details are in the 'details' field.
"""
type ServiceHealthStatus @shareable {
  """Whether the service is healthy and operational"""
  healthy: Boolean!
  
  """Service name for identification"""
  service: String!
  
  """Service version"""
  version: String!
  
  """ISO timestamp of the health check"""
  timestamp: String!
  
  """Service-specific details (claudeAvailable, claudeVersion, activeSessions, etc.)"""
  details: JSON
}

"""JSON scalar for flexible service-specific data"""
scalar JSON

type ClaudeResourceUsage {
  """Memory usage in MB"""
  memoryUsage: Float!
  
  """CPU usage percentage"""
  cpuUsage: Float!
  
  """Number of active processes"""
  activeProcesses: Int!
}

type ClaudeExecuteResult {
  """Session ID for this execution"""
  sessionId: ID!
  
  """Whether execution started successfully"""
  success: Boolean!
  
  """Error message if failed to start"""
  error: String
  
  """Initial response if available immediately"""
  initialResponse: String
  
  """Execution metadata"""
  metadata: ExecutionMetadata!
}

type ExecutionMetadata {
  """When execution started"""
  startTime: String!
  
  """Process ID"""
  pid: Int
  
  """Estimated completion time"""
  estimatedTime: Int
  
  """Command flags used"""
  flags: [String!]!
}

type CommandOutput {
  """Session ID this output belongs to"""
  sessionId: ID!
  
  """Output type"""
  type: OutputType!
  
  """The actual output content"""
  content: String!
  
  """Timestamp of this output"""
  timestamp: String!
  
  """Whether this is the final output"""
  isFinal: Boolean!
  
  """Token count for this output chunk"""
  tokens: Int
}

enum OutputType {
  """Standard output"""
  STDOUT
  
  """Error output"""
  STDERR
  
  """System message"""
  SYSTEM
  
  """Progress update"""
  PROGRESS
  
  """Final response"""
  FINAL
}

type HandoffResult {
  """Whether handoff document was created successfully"""
  success: Boolean!
  
  """Path to handoff document"""
  documentPath: String
  
  """Handoff document content"""
  content: String
  
  """Error message if failed"""
  error: String
  
  """Session state summary"""
  sessionSummary: SessionSummary!
}

type SessionSummary {
  """Number of interactions in session"""
  interactionCount: Int!
  
  """Total tokens used"""
  totalTokens: Int!
  
  """Key topics discussed"""
  topics: [String!]!
  
  """Files modified during session"""
  filesModified: [String!]!
}

type BatchCommitMessageResult {
  """Total repositories processed"""
  totalRepositories: Int!
  
  """Number of successful generations"""
  successCount: Int!
  
  """Individual results per repository"""
  results: [CommitMessageResult!]!
  
  """Total token usage"""
  totalTokenUsage: TokenUsage!
  
  """Execution time in milliseconds"""
  executionTime: Int!
}

type CommitMessageResult {
  """Repository path"""
  repositoryPath: String!
  
  """Repository name"""
  repositoryName: String!
  
  """Whether generation succeeded"""
  success: Boolean!
  
  """Generated commit message"""
  message: String
  
  """Error if generation failed"""
  error: String
  
  """Confidence score (0-1)"""
  confidence: Float
  
  """Suggested commit type (feat, fix, chore, etc.)"""
  commitType: String
}


# Input Types

input ClaudeExecuteInput {
  """The prompt or command to execute"""
  prompt: String!
  
  """Optional session ID to reuse"""
  sessionId: ID
  
  """Working directory for the command"""
  workingDirectory: String
  
  """Additional context to provide"""
  context: ContextInput
  
  """Command options"""
  options: CommandOptions
}

input ContextInput {
  """Files to include in context"""
  files: [String!]
  
  """Project-specific context"""
  projectContext: String
  
  """Additional instructions"""
  instructions: String
  
  """Maximum context size in tokens"""
  maxTokens: Int
}

input CommandOptions {
  """Model to use (if different from default)"""
  model: String
  
  """Temperature setting"""
  temperature: Float
  
  """Maximum response tokens"""
  maxTokens: Int
  
  """Custom flags to pass to Claude CLI"""
  customFlags: [String!]
  
  """Whether to stream output"""
  stream: Boolean
}

input ContinueSessionInput {
  """Session ID to continue"""
  sessionId: ID!
  
  """New prompt to send"""
  prompt: String!
  
  """Optional additional context"""
  additionalContext: ContextInput
}

input HandoffInput {
  """Session ID to create handoff for"""
  sessionId: ID!
  
  """Target for handoff (user, team, etc.)"""
  target: String
  
  """Additional notes for handoff"""
  notes: String
  
  """Whether to include full history"""
  includeFullHistory: Boolean
}

input BatchCommitMessageInput {
  """Repository information for commit message generation"""
  repositories: [RepositoryCommitInfo!]!
  
  """Style guide for commit messages"""
  styleGuide: CommitStyleGuide
  
  """Additional context for all commits"""
  globalContext: String
  
  """Whether to analyze relationships between changes"""
  analyzeRelationships: Boolean
}

input RepositoryCommitInfo {
  """Repository path"""
  path: String!
  
  """Repository name"""
  name: String!
  
  """Git diff of changes"""
  diff: String!
  
  """Files changed"""
  filesChanged: [String!]!
  
  """Recent commit history for style matching"""
  recentCommits: [String!]
  
  """Additional repository context"""
  context: String
}

input CommitStyleGuide {
  """Preferred format (conventional, descriptive, etc.)"""
  format: String
  
  """Maximum message length"""
  maxLength: Int
  
  """Whether to include scope"""
  includeScope: Boolean
  
  """Whether to include body"""
  includeBody: Boolean
  
  """Custom examples"""
  examples: [String!]
}

# Session Management Types

input ForkSessionInput {
  """Session ID to fork from"""
  sessionId: ID!
  
  """Message index to fork from (defaults to latest)"""
  messageIndex: Int
  
  """Name for the forked session"""
  name: String!
  
  """Whether to include message history up to fork point"""
  includeHistory: Boolean = true
}

type ForkSessionResult {
  """The newly forked session"""
  session: ClaudeSession!
  
  """The parent session"""
  parentSession: ClaudeSession!
  
  """Fork metadata"""
  forkMetadata: ForkMetadata!
}

type ForkMetadata {
  """When the fork was created"""
  forkedAt: String!
  
  """Message index where fork occurred"""
  forkPoint: Int!
  
  """Shared message count with parent"""
  sharedMessages: Int!
}

input CreateSessionTemplateInput {
  """Session to create template from"""
  sessionId: ID!
  
  """Template name"""
  name: String!
  
  """Template description"""
  description: String
  
  """Tags for categorization"""
  tags: [String!]
  
  """Whether to include full message history"""
  includeHistory: Boolean = false
  
  """Custom variables to parameterize"""
  variables: [TemplateVariableInput!]
}

input TemplateVariableInput {
  """Variable name"""
  name: String!
  
  """Variable description"""
  description: String
  
  """Default value"""
  defaultValue: String
  
  """Whether this variable is required"""
  required: Boolean = true
}

type TemplateVariable {
  """Variable name"""
  name: String!
  
  """Variable description"""
  description: String
  
  """Default value"""
  defaultValue: String
  
  """Whether this variable is required"""
  required: Boolean!
}

type SessionTemplate {
  """Template ID"""
  id: ID!
  
  """Template name"""
  name: String!
  
  """Template description"""
  description: String
  
  """Creation timestamp"""
  createdAt: String!
  
  """Last used timestamp"""
  lastUsedAt: String
  
  """Usage count"""
  usageCount: Int!
  
  """Tags for categorization"""
  tags: [String!]!
  
  """Template variables"""
  variables: [TemplateVariable!]!
  
  """Initial context/prompt"""
  initialContext: String!
  
  """Settings to apply"""
  settings: SessionSettings!
}

type SessionSettings {
  """Model to use"""
  model: String!
  
  """Temperature setting"""
  temperature: Float!
  
  """Maximum tokens"""
  maxTokens: Int
  
  """Custom flags"""
  customFlags: [String!]!
}

input BatchSessionOperationInput {
  """Session IDs to operate on"""
  sessionIds: [ID!]!
  
  """Operation to perform"""
  operation: SessionOperation!
  
  """Operation-specific parameters"""
  parameters: String
}

enum SessionOperation {
  """Archive sessions"""
  ARCHIVE
  
  """Delete sessions"""
  DELETE
  
  """Export sessions"""
  EXPORT
  
  """Tag sessions"""
  TAG
  
  """Analyze sessions"""
  ANALYZE
}

type BatchSessionOperationResult {
  """Total sessions processed"""
  totalProcessed: Int!
  
  """Successful operations"""
  successCount: Int!
  
  """Failed operations"""
  failedCount: Int!
  
  """Individual results"""
  results: [SessionOperationResult!]!
}

type SessionOperationResult {
  """Session ID"""
  sessionId: ID!
  
  """Operation success"""
  success: Boolean!
  
  """Error if failed"""
  error: String
  
  """Operation-specific result data"""
  resultData: String
}

input ShareSessionInput {
  """Session to share"""
  sessionId: ID!
  
  """Share recipients (emails or user IDs)"""
  recipients: [String!]!
  
  """Permission level"""
  permission: SharePermission!
  
  """Optional message"""
  message: String
  
  """Expiration time for share link"""
  expiresAt: String
}

enum SharePermission {
  """View only"""
  VIEW
  
  """Can continue conversation"""
  INTERACT
  
  """Full control including fork/delete"""
  ADMIN
}

type ShareResult {
  """Share ID"""
  shareId: ID!
  
  """Share URL"""
  shareUrl: String!
  
  """Share code for direct access"""
  shareCode: String!
  
  """When share expires"""
  expiresAt: String
}

type ArchiveResult {
  """Archive ID"""
  archiveId: ID!
  
  """Archive location/path"""
  archivePath: String!
  
  """Archive size in bytes"""
  sizeBytes: Int!
  
  """Compression ratio"""
  compressionRatio: Float!
}

# Session Analytics Types

type SessionAnalytics {
  """Session ID"""
  sessionId: ID!
  
  """Total messages"""
  messageCount: Int!
  
  """Token usage breakdown"""
  tokenUsage: TokenUsageAnalytics!
  
  """Time analytics"""
  timeAnalytics: TimeAnalytics!
  
  """Content analytics"""
  contentAnalytics: ContentAnalytics!
  
  """Cost breakdown"""
  costBreakdown: CostBreakdown!
}

type TokenUsageAnalytics {
  """Total input tokens"""
  totalInputTokens: Int!
  
  """Total output tokens"""
  totalOutputTokens: Int!
  
  """Average tokens per message"""
  averageTokensPerMessage: Float!
  
  """Token usage over time"""
  usageOverTime: [TokenUsagePoint!]!
}

type TokenUsagePoint {
  """Timestamp"""
  timestamp: String!
  
  """Cumulative input tokens"""
  inputTokens: Int!
  
  """Cumulative output tokens"""
  outputTokens: Int!
}

type TimeAnalytics {
  """Total session duration"""
  totalDuration: Int!
  
  """Average response time"""
  averageResponseTime: Float!
  
  """Longest pause between messages"""
  longestPause: Int!
  
  """Activity heatmap"""
  activityByHour: [HourActivity!]!
}

type HourActivity {
  """Hour of day (0-23)"""
  hour: Int!
  
  """Number of messages"""
  messageCount: Int!
}

type ContentAnalytics {
  """Most discussed topics"""
  topTopics: [Topic!]!
  
  """Code languages used"""
  codeLanguages: [CodeLanguage!]!
  
  """File types modified"""
  fileTypes: [FileType!]!
  
  """Complexity score"""
  complexityScore: Float!
}

type Topic {
  """Topic name"""
  name: String!
  
  """Frequency count"""
  count: Int!
  
  """Relevance score"""
  relevance: Float!
}

type CodeLanguage {
  """Language name"""
  language: String!
  
  """Lines of code"""
  linesOfCode: Int!
  
  """Number of snippets"""
  snippetCount: Int!
}

type FileType {
  """File extension"""
  extension: String!
  
  """Number of files"""
  fileCount: Int!
  
  """Total modifications"""
  modificationCount: Int!
}

type CostBreakdown {
  """Total cost in USD"""
  totalCost: Float!
  
  """Cost by model"""
  costByModel: [ModelCost!]!
  
  """Projected monthly cost at current rate"""
  projectedMonthlyCost: Float!
  
  """Cost optimization suggestions"""
  optimizationSuggestions: [String!]!
}

type ModelCost {
  """Model name"""
  model: String!
  
  """Total cost for this model"""
  cost: Float!
  
  """Token count for this model"""
  tokenCount: Int!
}

# Intelligent Resumption Types

type SessionResumptionData {
  """Session ID"""
  sessionId: ID!
  
  """Last activity timestamp"""
  lastActivity: String!
  
  """Resumption summary"""
  summary: String!
  
  """Priority level"""
  priority: ResumptionPriority!
  
  """Suggested prompt to continue"""
  suggestedPrompt: String
  
  """Open tasks from the session"""
  openTasks: [String!]!
  
  """Number of unresolved errors"""
  unresolvedErrors: Int!
  
  """Files being worked on"""
  currentFiles: [String!]!
  
  """Context optimization details"""
  contextOptimization: ContextOptimization
}

enum ResumptionPriority {
  HIGH
  MEDIUM
  LOW
}

type ContextOptimization {
  """Total messages in context"""
  totalMessages: Int!
  
  """Token usage"""
  tokenUsage: Int!
  
  """Maximum tokens allowed"""
  maxTokens: Int!
  
  """Utilization percentage"""
  utilizationPercent: Float!
}

type ResumableSession {
  """The session details"""
  session: ClaudeSession!
  
  """Resumption analysis data"""
  resumptionData: SessionResumptionData!
}


# Performance Monitoring Types

type PerformanceReport {
  """Aggregated metrics by operation"""
  operations: [OperationMetrics!]!
  
  """Comparison of parallel vs sequential execution"""
  parallelComparison: ParallelComparison
  
  """Time range of the report"""
  timeRange: TimeRange!
  
  """Total operations tracked"""
  totalOperations: Int!
}

type OperationMetrics {
  """Operation name"""
  operation: String!
  
  """Number of executions"""
  count: Int!
  
  """Total duration in milliseconds"""
  totalDuration: Float!
  
  """Average duration in milliseconds"""
  averageDuration: Float!
  
  """Minimum duration in milliseconds"""
  minDuration: Float!
  
  """Maximum duration in milliseconds"""
  maxDuration: Float!
  
  """95th percentile duration"""
  p95Duration: Float!
  
  """99th percentile duration"""
  p99Duration: Float!
  
  """Success rate percentage"""
  successRate: Float!
}

type ParallelComparison {
  """Metrics for parallel execution"""
  parallel: OperationMetrics
  
  """Metrics for sequential execution"""
  sequential: OperationMetrics
  
  """Speed improvement factor (sequential/parallel)"""
  speedup: Float!
  
  """Efficiency percentage"""
  efficiency: Float!
}

type TimeRange {
  """Start time of the range"""
  start: String!
  
  """End time of the range"""
  end: String!
  
  """Duration in minutes"""
  durationMinutes: Int!
}

# Progress Tracking Types

type AgentRunProgress {
  """Run ID this progress update is for"""
  runId: ID!
  
  """Repository being processed"""
  repository: String!
  
  """Current stage of processing"""
  stage: ProgressStage!
  
  """Progress percentage (0-100)"""
  percentage: Float!
  
  """Estimated time remaining in seconds"""
  estimatedTimeRemaining: Int
  
  """Current operation description"""
  currentOperation: String
  
  """Timestamp of this update"""
  timestamp: String!
  
  """Whether this run is complete"""
  isComplete: Boolean!
  
  """Error if any occurred"""
  error: String
}

type BatchProgress {
  """Batch ID for this group of operations"""
  batchId: ID!
  
  """Total number of operations in batch"""
  totalOperations: Int!
  
  """Number of completed operations"""
  completedOperations: Int!
  
  """Number of failed operations"""
  failedOperations: Int!
  
  """Overall progress percentage"""
  overallPercentage: Float!
  
  """Individual run progress"""
  runProgress: [AgentRunProgress!]!
  
  """Estimated total time remaining"""
  estimatedTimeRemaining: Int
  
  """Batch start time"""
  startTime: String!
  
  """Whether batch is complete"""
  isComplete: Boolean!
}

enum ProgressStage {
  """Queued for processing"""
  QUEUED
  
  """Initializing Claude session"""
  INITIALIZING
  
  """Loading context and files"""
  LOADING_CONTEXT
  
  """Processing with Claude"""
  PROCESSING
  
  """Parsing response"""
  PARSING_RESPONSE
  
  """Saving results"""
  SAVING_RESULTS
  
  """Completed successfully"""
  COMPLETED
  
  """Failed with error"""
  FAILED
  
  """Cancelled by user"""
  CANCELLED
}

# Pre-warm Types

type PreWarmedSessionResult {
  """Whether a pre-warmed session was available"""
  success: Boolean!
  
  """Session ID if available"""
  sessionId: ID
  
  """Current pre-warm status"""
  status: String!
  
  """Error message if failed"""
  error: String
}

type PreWarmStatus {
  """Current status of pre-warming"""
  status: PreWarmStatusType!
  
  """Session ID being warmed or ready"""
  sessionId: ID
  
  """Timestamp of status update"""
  timestamp: String!
  
  """Error message if warming failed"""
  error: String
}

enum PreWarmStatusType {
  """Currently warming a session"""
  WARMING
  
  """Session is ready for use"""
  READY
  
  """Session was claimed"""
  CLAIMED
  
  """Warming failed"""
  FAILED
  
  """No pre-warmed sessions"""
  NONE
}

type PreWarmMetrics {
  """Configured settings for pre-warm pool"""
  configured: PreWarmConfiguration!
  
  """Current state of pre-warm pool"""
  current: PreWarmCurrentState!
  
  """Detailed information about each session"""
  sessions: [PreWarmSessionInfo!]!
}

type PreWarmConfiguration {
  """Target pool size"""
  poolSize: Int!
  
  """Maximum session age in milliseconds"""
  maxSessionAge: Int!
  
  """Cleanup interval in milliseconds"""
  cleanupInterval: Int!
  
  """Warmup timeout in milliseconds"""
  warmupTimeout: Int!
}

type PreWarmCurrentState {
  """Total sessions in pool"""
  total: Int!
  
  """Sessions ready for use"""
  ready: Int!
  
  """Sessions currently warming"""
  warming: Int!
  
  """Sessions that have been claimed"""
  claimed: Int!
  
  """Whether warming is in progress"""
  isWarming: Boolean!
}

type PreWarmSessionInfo {
  """Session identifier"""
  sessionId: ID!
  
  """Claude session ID if available"""
  claudeSessionId: ID
  
  """Session status"""
  status: String!
  
  """Session age in milliseconds"""
  age: Int!
  
  """Creation timestamp"""
  createdAt: String!
}