schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
{
  query: Query
  mutation: Mutation
}

extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.10", import: ["@key", "@shareable"])

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @federation__requires(fields: federation__FieldSet!) on FIELD_DEFINITION

directive @federation__provides(fields: federation__FieldSet!) on FIELD_DEFINITION

directive @federation__external(reason: String) on OBJECT | FIELD_DEFINITION

directive @federation__tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | SCHEMA

directive @federation__extends on OBJECT | INTERFACE

directive @shareable repeatable on OBJECT | FIELD_DEFINITION

directive @federation__inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @federation__override(from: String!, label: String) on FIELD_DEFINITION

directive @federation__composeDirective(name: String) repeatable on SCHEMA

directive @federation__interfaceObject on OBJECT

directive @federation__authenticated on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @federation__requiresScopes(scopes: [[federation__Scope!]!]!) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @federation__policy(policies: [[federation__Policy!]!]!) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @federation__context(name: String!) repeatable on INTERFACE | OBJECT | UNION

directive @federation__fromContext(field: federation__ContextFieldValue) on ARGUMENT_DEFINITION

directive @federation__cost(weight: Int!) on ARGUMENT_DEFINITION | ENUM | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | OBJECT | SCALAR

directive @federation__listSize(assumedSize: Int, slicingArguments: [String!], sizedFields: [String!], requireOneSlicingArgument: Boolean = true) on FIELD_DEFINITION

type Query {
  """Get the current git status of a repository"""
  gitStatus(path: String!): GitStatus!

  """Scan workspace for all git repositories"""
  scanAllRepositories: [RepositoryScan!]!

  """Perform a detailed scan with diffs and history"""
  scanAllDetailed: DetailedScanReport!

  """List and get status of git submodules"""
  submodules: [Submodule!]!

  """Get comprehensive information about a specific repository"""
  repositoryDetails(path: String!): RepositoryDetails!

  """Check if repository has uncommitted changes"""
  isRepositoryClean(path: String!): RepositoryCleanStatus!

  """Get the latest commit hash for a repository"""
  latestCommit(path: String!): CommitInfo!
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}

type Mutation {
  """Execute a git command (with safety restrictions)"""
  executeGitCommand(input: GitCommandInput!): GitCommandResult!

  """Stage and commit changes"""
  commitChanges(input: CommitInput!): CommitResult!

  """Commit changes across multiple repositories"""
  batchCommit(input: BatchCommitInput!): BatchCommitResult!

  """Push changes to remote repository"""
  pushChanges(input: PushInput!): PushResult!
}

type Repository
  @key(fields: "path")
{
  """Absolute path to the repository"""
  path: String!

  """Repository name"""
  name: String!

  """Current git status"""
  status: GitStatus!

  """Whether repository has uncommitted changes"""
  isDirty: Boolean!

  """Current branch"""
  branch: String!
}

type GitStatus {
  """Current branch name"""
  branch: String!

  """Whether there are uncommitted changes"""
  isDirty: Boolean!

  """List of files with changes"""
  files: [FileStatus!]!

  """Number of commits ahead of remote"""
  ahead: Int!

  """Number of commits behind remote"""
  behind: Int!

  """Whether the branch has a remote tracking branch"""
  hasRemote: Boolean!

  """List of stashes"""
  stashes: [Stash!]!
}

type FileStatus {
  """File path relative to repository root"""
  path: String!

  """Git status code (M, A, D, ??, etc.)"""
  status: String!

  """Human-readable status description"""
  statusDescription: String!

  """Whether the file is staged"""
  isStaged: Boolean!
}

type Stash {
  """Stash index"""
  index: Int!

  """Stash message"""
  message: String!

  """When the stash was created"""
  timestamp: String!
}

type RepositoryScan {
  """Repository name"""
  name: String!

  """Absolute path to repository"""
  path: String!

  """Whether repository has uncommitted changes"""
  isDirty: Boolean!

  """Current branch"""
  branch: String!

  """Number of uncommitted files"""
  uncommittedCount: Int!

  """Repository type"""
  type: RepositoryType!
}

enum RepositoryType {
  REGULAR
  SUBMODULE
  BARE
  WORKTREE
}

type DetailedScanReport {
  """List of all repositories with detailed information"""
  repositories: [DetailedRepository!]!

  """Aggregate statistics"""
  statistics: ScanStatistics!

  """Scan metadata"""
  metadata: ScanMetadata!
}

type DetailedRepository {
  """Repository name"""
  name: String!

  """Absolute path"""
  path: String!

  """Current git status"""
  status: GitStatus!

  """Diff of staged changes"""
  stagedDiff: String

  """Diff of unstaged changes"""
  unstagedDiff: String

  """Recent commits"""
  recentCommits: [Commit!]!

  """Remote repositories"""
  remotes: [Remote!]!

  """Repository configuration"""
  config: RepositoryConfig!
}

type Commit {
  """Commit hash"""
  hash: String!

  """Commit message"""
  message: String!

  """Author name"""
  author: String!

  """Author email"""
  authorEmail: String!

  """Commit timestamp"""
  timestamp: String!
}

type Remote {
  """Remote name (e.g., origin)"""
  name: String!

  """Fetch URL"""
  fetchUrl: String!

  """Push URL"""
  pushUrl: String!
}

type RepositoryConfig {
  """Default branch name"""
  defaultBranch: String!

  """Whether this is a bare repository"""
  isBare: Boolean!

  """Whether this is a shallow clone"""
  isShallow: Boolean!
}

type Submodule {
  """Submodule name"""
  name: String!

  """Path relative to parent repository"""
  path: String!

  """Absolute path"""
  absolutePath: String!

  """Current commit hash"""
  hash: String!

  """Submodule URL"""
  url: String!

  """Whether submodule is initialized"""
  initialized: Boolean!

  """Git status if initialized"""
  status: GitStatus
}

type RepositoryDetails {
  """Repository name"""
  name: String!

  """Absolute path"""
  path: String!

  """Current git status"""
  status: GitStatus!

  """Repository statistics"""
  statistics: RepositoryStatistics!

  """Recent activity"""
  activity: RepositoryActivity!
}

type RepositoryStatistics {
  """Total number of commits"""
  totalCommits: Int!

  """Number of contributors"""
  contributors: Int!

  """Number of branches"""
  branches: Int!

  """Number of tags"""
  tags: Int!

  """Repository size in bytes"""
  sizeInBytes: Int!
}

type RepositoryActivity {
  """Last commit date"""
  lastCommitDate: String!

  """Most active contributor"""
  mostActiveContributor: String!

  """Recent branches"""
  recentBranches: [String!]!
}

type ScanStatistics {
  """Total number of repositories"""
  totalRepositories: Int!

  """Number of repositories with uncommitted changes"""
  dirtyRepositories: Int!

  """Total number of uncommitted files"""
  totalUncommittedFiles: Int!

  """Total additions across all repositories"""
  totalAdditions: Int!

  """Total deletions across all repositories"""
  totalDeletions: Int!

  """Changes grouped by type"""
  changesByType: ChangesByType!
}

type ChangesByType {
  """Number of modified files"""
  modified: Int!

  """Number of added files"""
  added: Int!

  """Number of deleted files"""
  deleted: Int!

  """Number of renamed files"""
  renamed: Int!

  """Number of untracked files"""
  untracked: Int!
}

type ScanMetadata {
  """When the scan started"""
  startTime: String!

  """When the scan completed"""
  endTime: String!

  """Duration in milliseconds"""
  duration: Int!

  """Workspace root path"""
  workspaceRoot: String!
}

type RepositoryCleanStatus {
  """Whether the repository is clean (no uncommitted changes)"""
  isClean: Boolean!

  """Number of uncommitted files"""
  uncommittedFiles: Int!

  """Latest commit hash"""
  latestCommitHash: String!

  """Repository path"""
  repository: String!
}

type CommitInfo {
  """Full commit hash"""
  hash: String!

  """Short commit hash"""
  shortHash: String!

  """Commit message"""
  message: String!

  """Author name"""
  author: String!

  """Commit timestamp"""
  timestamp: String!

  """Repository path"""
  repository: String!
}

input GitCommandInput {
  """Git command to execute"""
  command: String!

  """Command arguments"""
  args: [String!]!

  """Working directory"""
  cwd: String!
}

input CommitInput {
  """Repository path"""
  repository: String!

  """Commit message"""
  message: String!

  """Specific files to commit (empty = all)"""
  files: [String!]

  """Stage all changes before committing"""
  stageAll: Boolean

  """Author name (optional)"""
  author: String

  """Author email (optional)"""
  authorEmail: String
}

input BatchCommitInput {
  """List of commits to perform"""
  commits: [CommitInput!]!

  """Continue on error"""
  continueOnError: Boolean
}

input PushInput {
  """Repository path"""
  repository: String!

  """Remote name (default: origin)"""
  remote: String

  """Branch to push (default: current)"""
  branch: String

  """Force push"""
  force: Boolean
}

type GitCommandResult {
  """Whether the command succeeded"""
  success: Boolean!

  """Command output"""
  output: String

  """Error message if failed"""
  error: String
}

type CommitResult {
  """Whether the commit succeeded"""
  success: Boolean!

  """Commit hash if successful"""
  commitHash: String

  """Error message if failed"""
  error: String

  """Repository path"""
  repository: String!

  """Files that were committed"""
  committedFiles: [String!]!

  """Whether the repository is clean after commit"""
  isClean: Boolean @shareable

  """Number of remaining uncommitted files"""
  remainingFiles: Int @shareable
}

type BatchCommitResult {
  """Total number of repositories processed"""
  totalRepositories: Int!

  """Number of successful commits"""
  successCount: Int!

  """Individual commit results"""
  results: [CommitResult!]!

  """Total execution time in milliseconds"""
  executionTime: Int!
}

type PushResult {
  """Whether the push succeeded"""
  success: Boolean!

  """Remote that was pushed to"""
  remote: String!

  """Branch that was pushed"""
  branch: String!

  """Error message if failed"""
  error: String

  """Push summary from git"""
  summary: String
}

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

scalar link__Import

scalar federation__FieldSet

scalar federation__Scope

scalar federation__Policy

scalar federation__ContextFieldValue

scalar _Any

type _Service {
  sdl: String
}

union _Entity = Repository
