# Example Federated GraphQL Queries for Meta GOTHIC Gateway

# 1. Combined query from both services
query GetRepositoryWithAI {
  # From repo-agent-service
  gitStatus(path: "/Users/josh/Documents/meta-gothic-framework") {
    branch
    ahead
    behind
    files {
      path
      status
      staged
    }
  }
  
  # From claude-service
  sessions {
    id
    status
    pid
    createdAt
  }
  
  health {
    status
    version
    uptime
  }
}

# 2. Scan all repositories and generate commit messages
query ScanAndGenerateMessages {
  # Get all repositories with changes
  scanAllRepositories {
    path
    hasChanges
    branch
    uncommittedCount
  }
  
  # Check Claude service health
  health {
    status
    claudeAvailable
  }
}

# 3. Batch commit message generation
mutation GenerateBatchCommitMessages {
  generateCommitMessages(input: {
    repositories: [
      {
        path: "/path/to/repo1"
        diff: "..."
        recentCommits: ["feat: previous commit"]
      }
    ]
    temperature: 0.3
    maxTokens: 150
  }) {
    messages {
      repository
      message
      confidence
      error
    }
    statistics {
      total
      successful
      failed
      averageTime
    }
  }
}

# 4. Execute git command and track with Claude
mutation CommitWithTracking {
  # Execute the commit
  commitChanges(input: {
    path: "/path/to/repo"
    message: "feat: add new feature"
    files: ["src/index.ts", "README.md"]
  }) {
    success
    commitHash
    branch
    author
    timestamp
  }
}

# 5. Real-time Claude output subscription
subscription WatchClaudeExecution {
  commandOutput(sessionId: "session-123") {
    type
    content
    timestamp
  }
}

# 6. Batch operation with progress tracking
subscription TrackBatchProgress {
  batchProgress(batchId: "batch-456") {
    id
    totalItems
    completedItems
    currentItem
    percentage
    estimatedTimeRemaining
    status
  }
}

# 7. Service health monitoring
query MonitorServices {
  # Gateway health (includes service status)
  health {
    status
    version
    uptime
  }
  
  # Performance metrics from Claude service
  performanceMetrics {
    averageResponseTime
    requestsPerMinute
    errorRate
    queueDepth
    parallelComparison {
      parallelTime
      sequentialTime
      improvement
    }
  }
}

# 8. Complex federated operation
mutation CompleteWorkflow {
  # Step 1: Scan for changes
  scanResult: executeGitCommand(input: {
    command: "status"
    args: ["--porcelain"]
    cwd: "/path/to/repo"
  }) {
    success
    output
  }
  
  # Step 2: Generate commit message with Claude
  # (Would need to be a separate mutation due to dependencies)
}

# 9. Get detailed repository information
query GetRepositoryDetails {
  repositoryDetails(path: "/Users/josh/Documents/meta-gothic-framework") {
    name
    path
    currentBranch
    remoteUrl
    lastCommit {
      hash
      message
      author
      date
    }
    stats {
      totalCommits
      contributors
      branches
    }
    submodules {
      name
      path
      url
      currentCommit
      status
    }
  }
}