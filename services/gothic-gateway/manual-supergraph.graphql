schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
  subscription: Subscription
}

directive @join__graph(name: String!, url: String!) on ENUM_VALUE
directive @join__type(graph: join__Graph!, key: join__FieldSet, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE
directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION
directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE
directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION
directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  REPO_AGENT @join__graph(name: "repo-agent", url: "http://localhost:3004/graphql")
  CLAUDE @join__graph(name: "claude", url: "http://localhost:3002/graphql")
}

enum link__Purpose {
  SECURITY
  EXECUTION
}

scalar link__Import

type Query 
  @join__type(graph: REPO_AGENT)
  @join__type(graph: CLAUDE)
{
  gitStatus(path: String!): GitStatus! @join__field(graph: REPO_AGENT)
  scanAllRepositories: [RepositoryScan!]! @join__field(graph: REPO_AGENT)
  scanAllDetailed: DetailedScanReport! @join__field(graph: REPO_AGENT)
  
  sessions: [ClaudeSession!]! @join__field(graph: CLAUDE)
  session(id: ID!): ClaudeSession @join__field(graph: CLAUDE)
  health: HealthStatus! @join__field(graph: CLAUDE)
  agentRuns(status: RunStatus, repository: String, limit: Int, offset: Int): AgentRunList! @join__field(graph: CLAUDE)
}

type Mutation
  @join__type(graph: REPO_AGENT)
  @join__type(graph: CLAUDE)
{
  commitChanges(input: CommitInput!): CommitResult! @join__field(graph: REPO_AGENT)
  batchCommit(input: BatchCommitInput!): BatchCommitResult! @join__field(graph: REPO_AGENT)
  
  executeCommand(input: ClaudeExecuteInput!): ClaudeExecuteResult! @join__field(graph: CLAUDE)
  generateCommitMessages(input: BatchCommitMessageInput!): BatchCommitMessageResult! @join__field(graph: CLAUDE)
  generateExecutiveSummary(input: ExecutiveSummaryInput!): ExecutiveSummaryResult! @join__field(graph: CLAUDE)
}

type Subscription
  @join__type(graph: CLAUDE)
{
  commandOutput(sessionId: ID!): CommandOutput! @join__field(graph: CLAUDE)
  agentRunProgress(runId: ID!): AgentRunProgressUpdate! @join__field(graph: CLAUDE)
}

# Key types from repo-agent
type GitStatus @join__type(graph: REPO_AGENT) {
  branch: String!
  isDirty: Boolean!
  files: [FileStatus!]!
  ahead: Int!
  behind: Int!
  hasRemote: Boolean!
}

type FileStatus @join__type(graph: REPO_AGENT) {
  path: String!
  status: String!
  statusDescription: String!
  isStaged: Boolean!
}

type RepositoryScan @join__type(graph: REPO_AGENT) {
  name: String!
  path: String!
  isDirty: Boolean!
  branch: String!
  uncommittedCount: Int!
  type: RepositoryType!
}

enum RepositoryType @join__type(graph: REPO_AGENT) {
  REGULAR
  SUBMODULE
  BARE
  WORKTREE
}

type DetailedScanReport @join__type(graph: REPO_AGENT) {
  repositories: [DetailedRepository!]!
  statistics: ScanStatistics!
  metadata: ScanMetadata!
}

type DetailedRepository @join__type(graph: REPO_AGENT) {
  name: String!
  path: String!
  status: GitStatus!
}

type ScanStatistics @join__type(graph: REPO_AGENT) {
  totalRepositories: Int!
  dirtyRepositories: Int!
  totalUncommittedFiles: Int!
}

type ScanMetadata @join__type(graph: REPO_AGENT) {
  startTime: String!
  endTime: String!
  duration: Int!
  workspaceRoot: String!
}

type CommitResult @join__type(graph: REPO_AGENT) {
  success: Boolean!
  commitHash: String
  error: String
  repository: String!
  committedFiles: [String!]!
}

type BatchCommitResult @join__type(graph: REPO_AGENT) {
  totalRepositories: Int!
  successCount: Int!
  results: [CommitResult!]!
  executionTime: Int!
}

# Key types from claude service
type ClaudeSession 
  @join__type(graph: CLAUDE, key: "id")
{
  id: ID!
  status: String!
  createdAt: String!
  cwd: String
  pid: Int
}

type HealthStatus @join__type(graph: CLAUDE) {
  status: String!
  claudeAvailable: Boolean!
  version: String
  uptime: Int
}

type AgentRunList @join__type(graph: CLAUDE) {
  runs: [AgentRun!]!
  totalCount: Int!
  hasMore: Boolean!
}

type AgentRun 
  @join__type(graph: CLAUDE, key: "id")
{
  id: ID!
  repository: String!
  status: RunStatus!
  startedAt: String!
  completedAt: String
  duration: Int
}

enum RunStatus @join__type(graph: CLAUDE) {
  QUEUED
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

type ClaudeExecuteResult @join__type(graph: CLAUDE) {
  sessionId: String!
  status: String!
  output: String
  error: String
  pid: Int
}

type BatchCommitMessageResult @join__type(graph: CLAUDE) {
  totalRepositories: Int!
  successCount: Int!
  results: [CommitMessageResult!]!
  executionTime: Int!
}

type CommitMessageResult @join__type(graph: CLAUDE) {
  repositoryPath: String!
  repositoryName: String!
  success: Boolean!
  message: String
  error: String
  confidence: Float
  commitType: String
}

type ExecutiveSummaryResult @join__type(graph: CLAUDE) {
  success: Boolean!
  summary: String
  error: String
  metadata: SummaryMetadata!
}

type SummaryMetadata @join__type(graph: CLAUDE) {
  repositoryCount: Int!
  totalChanges: Int!
  themes: [Theme!]!
  riskLevel: String!
  suggestedActions: [String!]!
}

type Theme @join__type(graph: CLAUDE) {
  name: String!
  description: String!
  affectedRepositories: [String!]!
  impact: String!
}

type CommandOutput @join__type(graph: CLAUDE) {
  type: String!
  content: String!
  timestamp: String!
}

type AgentRunProgressUpdate @join__type(graph: CLAUDE) {
  runId: ID!
  status: RunStatus!
  progress: Float!
  stage: String
  message: String
}

# Input types
input CommitInput @join__type(graph: REPO_AGENT) {
  repository: String!
  message: String!
  files: [String!]
  stageAll: Boolean
}

input BatchCommitInput @join__type(graph: REPO_AGENT) {
  commits: [CommitInput!]!
  continueOnError: Boolean
}

input ClaudeExecuteInput @join__type(graph: CLAUDE) {
  command: String!
  args: [String!]!
  projectPath: String!
}

input BatchCommitMessageInput @join__type(graph: CLAUDE) {
  repositories: [RepositoryInput!]!
  styleGuide: CommitStyleGuide
  globalContext: String
  analyzeRelationships: Boolean
}

input RepositoryInput @join__type(graph: CLAUDE) {
  path: String!
  name: String!
  diff: String!
  filesChanged: [String!]!
  recentCommits: [String!]
  context: String
}

input CommitStyleGuide @join__type(graph: CLAUDE) {
  format: String
  maxLength: Int
  includeScope: Boolean
  includeBody: Boolean
  examples: [String!]
}

input ExecutiveSummaryInput @join__type(graph: CLAUDE) {
  commitMessages: [CommitMessageInput!]!
  audience: String
  maxLength: Int
  focusAreas: [String!]
  includeRiskAssessment: Boolean
  includeRecommendations: Boolean
}

input CommitMessageInput @join__type(graph: CLAUDE) {
  repository: String!
  message: String!
  stats: ChangeStats
}

input ChangeStats @join__type(graph: CLAUDE) {
  filesChanged: Int!
  additions: Int!
  deletions: Int!
}